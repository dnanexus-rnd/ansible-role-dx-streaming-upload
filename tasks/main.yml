---
# Install Dx-toolkit

# - name: Load DNAnexus repo signing key
#   apt_key: url=https://wiki.dnanexus.com/images/files/ubuntu-signing-key.gpg

# - name: Add dx-toolkit ppa
#   apt_repository: repo="{{item}}"
#   with_items:
#   - "deb http://dnanexus-apt-prod.s3.amazonaws.com/ubuntu trusty/amd64/"
#   - "deb http://dnanexus-apt-prod.s3.amazonaws.com/ubuntu trusty/all/"

# - name: Update apt
#   apt: update_cache=yes

# - name: Install dx-toolkit
#   apt: pkg=dx-toolkit state=present

- name: Get DX tarball
  unarchive: src=https://wiki.dnanexus.com/images/files/dx-toolkit-current-ubuntu-14.04-amd64.tar.gz dest=/opt copy=no

# http://stackoverflow.com/questions/22256884/not-possible-to-source-bashrc-with-ansible
- name: check dx version
  shell: source /opt/dx-toolkit/environment  && dx --version
  args:
    executable: /bin/bash
  register: dx_version

- name: Print dx version
  debug:
    msg: "Dx-toolkit Version {{ dx_version.stdout }}"

# Install Upload Agent
- name: Create folder to house upload agent
  file: path=/opt/dnanexus-upload-agent state=directory mode=0755

- name: Download and unzip UA tarball
  unarchive: src=https://wiki.dnanexus.com/images/files/dnanexus-upload-agent-current-linux.tar.gz dest=/opt/dnanexus-upload-agent copy=no

- name: Move ua executable to un-versioned folder location for ease of reference
  shell: mv /opt/dnanexus-upload-agent/*/* /opt/dnanexus-upload-agent/

# Persistent change to environment: https://coderwall.com/p/ynvi0q/updating-path-with-ansible-system-wide
# - name: Add ua path persistently to global variable
#   lineinfile:  >
#     dest=/etc/environment
#     state=present
#     backrefs=yes
#     regexp='PATH=(["]*)((?!.*?{{item}}).*?)(["]*)$'
#     line="PATH=\1\2:{{item}}\3"

#   with_items:
#   - opt/dnanexus-upload-agent

- name: Check installed UA version
  command: ua --version
  environment:
    PATH: /opt/dnanexus-upload-agent:{{ ansible_env.PATH }}
  register: ua_version

- name: Print installed UA version
  debug:
    msg: "Upload agent Version {{ ua_version.stdout }}"

# Logging into DNAnexus account
- name: Log in to DNAnexus account if token is provided
  command: source /opt/dx-toolkit/environment && dx login --token {{ dx_token }} --noprojects
  args:
    executable: /bin/bash
  when: dx_token is defined

# Copy the necessary files for RUN directory monitoring
- name: Create the script directory for housing scripts
  file: path=/opt/dnanexus/scripts state=directory mode=0755

- name: Create the config directory for housing config files
  file: path=/opt/dnanexus/config state=directory mode=0755

- name: Copy necessary scripts
  copy: src=../files/ dest=/opt/dnanexus/scripts

- name: Copy necessary config
  copy: src=../templates/monitor_run_config.template dest=/opt/dnanexus/config/monitor_runs.config

- name: Create lock file for CRON to wait on using flock
  file: path=/opt/dnanexus/cron.lock state=touch

- name: fail when project is not defined
  fail: msg="Project to upload to was not defined"
  when: upload_project is not defined

- name: fail when local folder to monitor (for RUN dirs) is not defined
  fail: msg="Local dir to monitor (for RUN dirs) is not defined"
  when: monitored_dir is not defined

# Set up CRON job for monitoring
- name: set up CRON job to run every minute in debug mode
  cron: >
    name="DNAnexus monitor runs"
    job="flock -n /opt/dnanexus/cron.lock -c python /opt/dnanexus/scripts/monitor_runs.py -c /opt/dnanexus/config/monitor_runs.config -p '{{ upload_project }}' -d '{{ monitored_dir }}'"
  when: mode == "debug"

- name: set up CRON job to run every hour in deploy mode
  cron: >
    name="DNAnexus monitor runs"
    job="flock -n /opt/dnanexus/cron.lock -c python /opt/dnanexus/scripts/monitor_runs.py -c /opt/dnanexus/config/monitor_runs.config -p '{{ upload_project }}' -d '{{ monitored_dir }}'"
  when: mode == "deploy"

